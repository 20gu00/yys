// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: travel.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TravelClient is the client API for Travel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TravelClient interface {
	//homestayDetail
	HomestayDetail(ctx context.Context, in *HomestayDetailReq, opts ...grpc.CallOption) (*HomestayDetailResp, error)
	//provide to admin use
	//homestay
	AddHomestay(ctx context.Context, in *AddHomestayReq, opts ...grpc.CallOption) (*AddHomestayResp, error)
	DeleteHomestay(ctx context.Context, in *DeleteHomestayReq, opts ...grpc.CallOption) (*DeleteHomestayResp, error)
	UpdateHomestay(ctx context.Context, in *UpdateHomestayReq, opts ...grpc.CallOption) (*UpdateHomestayResp, error)
	ListHomestay(ctx context.Context, in *ListHomestayReq, opts ...grpc.CallOption) (*ListHomestayResp, error)
	//homestayActivity
	AddHomestayActivity(ctx context.Context, in *AddHomestayActivityReq, opts ...grpc.CallOption) (*AddHomestayActivityResp, error)
	DeleteHomestatActivity(ctx context.Context, in *DeleteHomestayActivityReq, opts ...grpc.CallOption) (*DeleteHomestayResp, error)
	UpdateHomestayActivity(ctx context.Context, in *UpdateHomestayActivityReq, opts ...grpc.CallOption) (*UpdateHomestayActivityResp, error)
	ListHomestayActivity(ctx context.Context, in *ListHomestayActivityReq, opts ...grpc.CallOption) (*ListHomestayActivityResp, error)
	//homestayBusiness
	AddHomestayBusiness(ctx context.Context, in *AddHomestayBusinessReq, opts ...grpc.CallOption) (*AddHomestayActivityResp, error)
	DeleteHomestayBusiness(ctx context.Context, in *DeleteHomestayBusinessReq, opts ...grpc.CallOption) (*DeleteHomestayBusinessResp, error)
	UpdateHomestayBussiness(ctx context.Context, in *UpdateHomestayBusinessReq, opts ...grpc.CallOption) (*UpdateHomestayBusinessResp, error)
	ListHomestayBussiness(ctx context.Context, in *ListHomestayBusinessReq, opts ...grpc.CallOption) (*ListHomestayBusinessResp, error)
	//homestayComment
	ListHomestayComment(ctx context.Context, in *ListHomestaycommentReq, opts ...grpc.CallOption) (*ListHomestaycommentResp, error)
	AddHomestayComment(ctx context.Context, in *AddHomestaycommentReq, opts ...grpc.CallOption) (*AddHomestaycommentResp, error)
	DeleteHomestayComment(ctx context.Context, in *DeleteHomestaycommentReq, opts ...grpc.CallOption) (*DeleteHomestaycommentResp, error)
	UpdateHomestayComment(ctx context.Context, in *UpdateHomestaycommentReq, opts ...grpc.CallOption) (*UpdateHomestaycommentResp, error)
}

type travelClient struct {
	cc grpc.ClientConnInterface
}

func NewTravelClient(cc grpc.ClientConnInterface) TravelClient {
	return &travelClient{cc}
}

func (c *travelClient) HomestayDetail(ctx context.Context, in *HomestayDetailReq, opts ...grpc.CallOption) (*HomestayDetailResp, error) {
	out := new(HomestayDetailResp)
	err := c.cc.Invoke(ctx, "/pb.travel/homestayDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) AddHomestay(ctx context.Context, in *AddHomestayReq, opts ...grpc.CallOption) (*AddHomestayResp, error) {
	out := new(AddHomestayResp)
	err := c.cc.Invoke(ctx, "/pb.travel/addHomestay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) DeleteHomestay(ctx context.Context, in *DeleteHomestayReq, opts ...grpc.CallOption) (*DeleteHomestayResp, error) {
	out := new(DeleteHomestayResp)
	err := c.cc.Invoke(ctx, "/pb.travel/deleteHomestay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) UpdateHomestay(ctx context.Context, in *UpdateHomestayReq, opts ...grpc.CallOption) (*UpdateHomestayResp, error) {
	out := new(UpdateHomestayResp)
	err := c.cc.Invoke(ctx, "/pb.travel/updateHomestay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) ListHomestay(ctx context.Context, in *ListHomestayReq, opts ...grpc.CallOption) (*ListHomestayResp, error) {
	out := new(ListHomestayResp)
	err := c.cc.Invoke(ctx, "/pb.travel/listHomestay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) AddHomestayActivity(ctx context.Context, in *AddHomestayActivityReq, opts ...grpc.CallOption) (*AddHomestayActivityResp, error) {
	out := new(AddHomestayActivityResp)
	err := c.cc.Invoke(ctx, "/pb.travel/addHomestayActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) DeleteHomestatActivity(ctx context.Context, in *DeleteHomestayActivityReq, opts ...grpc.CallOption) (*DeleteHomestayResp, error) {
	out := new(DeleteHomestayResp)
	err := c.cc.Invoke(ctx, "/pb.travel/deleteHomestatActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) UpdateHomestayActivity(ctx context.Context, in *UpdateHomestayActivityReq, opts ...grpc.CallOption) (*UpdateHomestayActivityResp, error) {
	out := new(UpdateHomestayActivityResp)
	err := c.cc.Invoke(ctx, "/pb.travel/updateHomestayActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) ListHomestayActivity(ctx context.Context, in *ListHomestayActivityReq, opts ...grpc.CallOption) (*ListHomestayActivityResp, error) {
	out := new(ListHomestayActivityResp)
	err := c.cc.Invoke(ctx, "/pb.travel/listHomestayActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) AddHomestayBusiness(ctx context.Context, in *AddHomestayBusinessReq, opts ...grpc.CallOption) (*AddHomestayActivityResp, error) {
	out := new(AddHomestayActivityResp)
	err := c.cc.Invoke(ctx, "/pb.travel/addHomestayBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) DeleteHomestayBusiness(ctx context.Context, in *DeleteHomestayBusinessReq, opts ...grpc.CallOption) (*DeleteHomestayBusinessResp, error) {
	out := new(DeleteHomestayBusinessResp)
	err := c.cc.Invoke(ctx, "/pb.travel/deleteHomestayBusiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) UpdateHomestayBussiness(ctx context.Context, in *UpdateHomestayBusinessReq, opts ...grpc.CallOption) (*UpdateHomestayBusinessResp, error) {
	out := new(UpdateHomestayBusinessResp)
	err := c.cc.Invoke(ctx, "/pb.travel/updateHomestayBussiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) ListHomestayBussiness(ctx context.Context, in *ListHomestayBusinessReq, opts ...grpc.CallOption) (*ListHomestayBusinessResp, error) {
	out := new(ListHomestayBusinessResp)
	err := c.cc.Invoke(ctx, "/pb.travel/listHomestayBussiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) ListHomestayComment(ctx context.Context, in *ListHomestaycommentReq, opts ...grpc.CallOption) (*ListHomestaycommentResp, error) {
	out := new(ListHomestaycommentResp)
	err := c.cc.Invoke(ctx, "/pb.travel/listHomestayComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) AddHomestayComment(ctx context.Context, in *AddHomestaycommentReq, opts ...grpc.CallOption) (*AddHomestaycommentResp, error) {
	out := new(AddHomestaycommentResp)
	err := c.cc.Invoke(ctx, "/pb.travel/addHomestayComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) DeleteHomestayComment(ctx context.Context, in *DeleteHomestaycommentReq, opts ...grpc.CallOption) (*DeleteHomestaycommentResp, error) {
	out := new(DeleteHomestaycommentResp)
	err := c.cc.Invoke(ctx, "/pb.travel/DeleteHomestayComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *travelClient) UpdateHomestayComment(ctx context.Context, in *UpdateHomestaycommentReq, opts ...grpc.CallOption) (*UpdateHomestaycommentResp, error) {
	out := new(UpdateHomestaycommentResp)
	err := c.cc.Invoke(ctx, "/pb.travel/UpdateHomestayComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TravelServer is the server API for Travel service.
// All implementations must embed UnimplementedTravelServer
// for forward compatibility
type TravelServer interface {
	//homestayDetail
	HomestayDetail(context.Context, *HomestayDetailReq) (*HomestayDetailResp, error)
	//provide to admin use
	//homestay
	AddHomestay(context.Context, *AddHomestayReq) (*AddHomestayResp, error)
	DeleteHomestay(context.Context, *DeleteHomestayReq) (*DeleteHomestayResp, error)
	UpdateHomestay(context.Context, *UpdateHomestayReq) (*UpdateHomestayResp, error)
	ListHomestay(context.Context, *ListHomestayReq) (*ListHomestayResp, error)
	//homestayActivity
	AddHomestayActivity(context.Context, *AddHomestayActivityReq) (*AddHomestayActivityResp, error)
	DeleteHomestatActivity(context.Context, *DeleteHomestayActivityReq) (*DeleteHomestayResp, error)
	UpdateHomestayActivity(context.Context, *UpdateHomestayActivityReq) (*UpdateHomestayActivityResp, error)
	ListHomestayActivity(context.Context, *ListHomestayActivityReq) (*ListHomestayActivityResp, error)
	//homestayBusiness
	AddHomestayBusiness(context.Context, *AddHomestayBusinessReq) (*AddHomestayActivityResp, error)
	DeleteHomestayBusiness(context.Context, *DeleteHomestayBusinessReq) (*DeleteHomestayBusinessResp, error)
	UpdateHomestayBussiness(context.Context, *UpdateHomestayBusinessReq) (*UpdateHomestayBusinessResp, error)
	ListHomestayBussiness(context.Context, *ListHomestayBusinessReq) (*ListHomestayBusinessResp, error)
	//homestayComment
	ListHomestayComment(context.Context, *ListHomestaycommentReq) (*ListHomestaycommentResp, error)
	AddHomestayComment(context.Context, *AddHomestaycommentReq) (*AddHomestaycommentResp, error)
	DeleteHomestayComment(context.Context, *DeleteHomestaycommentReq) (*DeleteHomestaycommentResp, error)
	UpdateHomestayComment(context.Context, *UpdateHomestaycommentReq) (*UpdateHomestaycommentResp, error)
	mustEmbedUnimplementedTravelServer()
}

// UnimplementedTravelServer must be embedded to have forward compatible implementations.
type UnimplementedTravelServer struct {
}

func (UnimplementedTravelServer) HomestayDetail(context.Context, *HomestayDetailReq) (*HomestayDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomestayDetail not implemented")
}
func (UnimplementedTravelServer) AddHomestay(context.Context, *AddHomestayReq) (*AddHomestayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomestay not implemented")
}
func (UnimplementedTravelServer) DeleteHomestay(context.Context, *DeleteHomestayReq) (*DeleteHomestayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomestay not implemented")
}
func (UnimplementedTravelServer) UpdateHomestay(context.Context, *UpdateHomestayReq) (*UpdateHomestayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomestay not implemented")
}
func (UnimplementedTravelServer) ListHomestay(context.Context, *ListHomestayReq) (*ListHomestayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomestay not implemented")
}
func (UnimplementedTravelServer) AddHomestayActivity(context.Context, *AddHomestayActivityReq) (*AddHomestayActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomestayActivity not implemented")
}
func (UnimplementedTravelServer) DeleteHomestatActivity(context.Context, *DeleteHomestayActivityReq) (*DeleteHomestayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomestatActivity not implemented")
}
func (UnimplementedTravelServer) UpdateHomestayActivity(context.Context, *UpdateHomestayActivityReq) (*UpdateHomestayActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomestayActivity not implemented")
}
func (UnimplementedTravelServer) ListHomestayActivity(context.Context, *ListHomestayActivityReq) (*ListHomestayActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomestayActivity not implemented")
}
func (UnimplementedTravelServer) AddHomestayBusiness(context.Context, *AddHomestayBusinessReq) (*AddHomestayActivityResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomestayBusiness not implemented")
}
func (UnimplementedTravelServer) DeleteHomestayBusiness(context.Context, *DeleteHomestayBusinessReq) (*DeleteHomestayBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomestayBusiness not implemented")
}
func (UnimplementedTravelServer) UpdateHomestayBussiness(context.Context, *UpdateHomestayBusinessReq) (*UpdateHomestayBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomestayBussiness not implemented")
}
func (UnimplementedTravelServer) ListHomestayBussiness(context.Context, *ListHomestayBusinessReq) (*ListHomestayBusinessResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomestayBussiness not implemented")
}
func (UnimplementedTravelServer) ListHomestayComment(context.Context, *ListHomestaycommentReq) (*ListHomestaycommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomestayComment not implemented")
}
func (UnimplementedTravelServer) AddHomestayComment(context.Context, *AddHomestaycommentReq) (*AddHomestaycommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHomestayComment not implemented")
}
func (UnimplementedTravelServer) DeleteHomestayComment(context.Context, *DeleteHomestaycommentReq) (*DeleteHomestaycommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomestayComment not implemented")
}
func (UnimplementedTravelServer) UpdateHomestayComment(context.Context, *UpdateHomestaycommentReq) (*UpdateHomestaycommentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomestayComment not implemented")
}
func (UnimplementedTravelServer) mustEmbedUnimplementedTravelServer() {}

// UnsafeTravelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TravelServer will
// result in compilation errors.
type UnsafeTravelServer interface {
	mustEmbedUnimplementedTravelServer()
}

func RegisterTravelServer(s grpc.ServiceRegistrar, srv TravelServer) {
	s.RegisterService(&Travel_ServiceDesc, srv)
}

func _Travel_HomestayDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomestayDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).HomestayDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/homestayDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).HomestayDetail(ctx, req.(*HomestayDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_AddHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomestayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).AddHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/addHomestay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).AddHomestay(ctx, req.(*AddHomestayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_DeleteHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomestayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).DeleteHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/deleteHomestay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).DeleteHomestay(ctx, req.(*DeleteHomestayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_UpdateHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomestayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).UpdateHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/updateHomestay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).UpdateHomestay(ctx, req.(*UpdateHomestayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_ListHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomestayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).ListHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/listHomestay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).ListHomestay(ctx, req.(*ListHomestayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_AddHomestayActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomestayActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).AddHomestayActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/addHomestayActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).AddHomestayActivity(ctx, req.(*AddHomestayActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_DeleteHomestatActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomestayActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).DeleteHomestatActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/deleteHomestatActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).DeleteHomestatActivity(ctx, req.(*DeleteHomestayActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_UpdateHomestayActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomestayActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).UpdateHomestayActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/updateHomestayActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).UpdateHomestayActivity(ctx, req.(*UpdateHomestayActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_ListHomestayActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomestayActivityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).ListHomestayActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/listHomestayActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).ListHomestayActivity(ctx, req.(*ListHomestayActivityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_AddHomestayBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomestayBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).AddHomestayBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/addHomestayBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).AddHomestayBusiness(ctx, req.(*AddHomestayBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_DeleteHomestayBusiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomestayBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).DeleteHomestayBusiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/deleteHomestayBusiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).DeleteHomestayBusiness(ctx, req.(*DeleteHomestayBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_UpdateHomestayBussiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomestayBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).UpdateHomestayBussiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/updateHomestayBussiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).UpdateHomestayBussiness(ctx, req.(*UpdateHomestayBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_ListHomestayBussiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomestayBusinessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).ListHomestayBussiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/listHomestayBussiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).ListHomestayBussiness(ctx, req.(*ListHomestayBusinessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_ListHomestayComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomestaycommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).ListHomestayComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/listHomestayComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).ListHomestayComment(ctx, req.(*ListHomestaycommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_AddHomestayComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHomestaycommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).AddHomestayComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/addHomestayComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).AddHomestayComment(ctx, req.(*AddHomestaycommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_DeleteHomestayComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomestaycommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).DeleteHomestayComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/DeleteHomestayComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).DeleteHomestayComment(ctx, req.(*DeleteHomestaycommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Travel_UpdateHomestayComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomestaycommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TravelServer).UpdateHomestayComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.travel/UpdateHomestayComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TravelServer).UpdateHomestayComment(ctx, req.(*UpdateHomestaycommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Travel_ServiceDesc is the grpc.ServiceDesc for Travel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Travel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.travel",
	HandlerType: (*TravelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "homestayDetail",
			Handler:    _Travel_HomestayDetail_Handler,
		},
		{
			MethodName: "addHomestay",
			Handler:    _Travel_AddHomestay_Handler,
		},
		{
			MethodName: "deleteHomestay",
			Handler:    _Travel_DeleteHomestay_Handler,
		},
		{
			MethodName: "updateHomestay",
			Handler:    _Travel_UpdateHomestay_Handler,
		},
		{
			MethodName: "listHomestay",
			Handler:    _Travel_ListHomestay_Handler,
		},
		{
			MethodName: "addHomestayActivity",
			Handler:    _Travel_AddHomestayActivity_Handler,
		},
		{
			MethodName: "deleteHomestatActivity",
			Handler:    _Travel_DeleteHomestatActivity_Handler,
		},
		{
			MethodName: "updateHomestayActivity",
			Handler:    _Travel_UpdateHomestayActivity_Handler,
		},
		{
			MethodName: "listHomestayActivity",
			Handler:    _Travel_ListHomestayActivity_Handler,
		},
		{
			MethodName: "addHomestayBusiness",
			Handler:    _Travel_AddHomestayBusiness_Handler,
		},
		{
			MethodName: "deleteHomestayBusiness",
			Handler:    _Travel_DeleteHomestayBusiness_Handler,
		},
		{
			MethodName: "updateHomestayBussiness",
			Handler:    _Travel_UpdateHomestayBussiness_Handler,
		},
		{
			MethodName: "listHomestayBussiness",
			Handler:    _Travel_ListHomestayBussiness_Handler,
		},
		{
			MethodName: "listHomestayComment",
			Handler:    _Travel_ListHomestayComment_Handler,
		},
		{
			MethodName: "addHomestayComment",
			Handler:    _Travel_AddHomestayComment_Handler,
		},
		{
			MethodName: "DeleteHomestayComment",
			Handler:    _Travel_DeleteHomestayComment_Handler,
		},
		{
			MethodName: "UpdateHomestayComment",
			Handler:    _Travel_UpdateHomestayComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "travel.proto",
}
